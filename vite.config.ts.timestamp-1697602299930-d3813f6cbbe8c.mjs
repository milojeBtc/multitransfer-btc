// vite.config.ts
import { defineConfig } from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/vite/dist/node/index.js";
import react from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/@vitejs/plugin-react-swc/index.mjs";
import { nodePolyfills } from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/vite-plugin-node-polyfills/dist/index.js";
import { resolve } from "path";
import dts from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/vite-plugin-dts/dist/index.mjs";

// package.json
var peerDependencies = {
  "@magiceden-oss/msigner": "file:src/modules/msigner",
  "@mempool/mempool.js": "^2.3.0",
  "@sadoprotocol/ordit-sdk": "2.1.1",
  "bitcoinjs-lib": "^6.1.0",
  react: "^18.2.0",
  "react-dom": "^18.2.0",
  "rpc-bitcoin": "^2.0.0",
  "sats-connect": "^0.5.0",
  "tiny-secp256k1": "^2.2.0"
};

// vite.config.ts
import commonjs from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/@rollup/plugin-commonjs/dist/es/index.js";
import { wasm } from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/@rollup/plugin-wasm/dist/es/index.js";
import cssInjectedByJsPlugin from "file:///E:/Golden/Projects/goldnite/psbt/ord-connect-main/packages/ord-connect/node_modules/vite-plugin-css-injected-by-js/dist/esm/index.js";
var __vite_injected_original_dirname = "E:\\Golden\\Projects\\goldnite\\psbt\\ord-connect-main\\packages\\ord-connect";
var vite_config_default = defineConfig({
  optimizeDeps: {
    esbuildOptions: {
      // Node.js global to browser globalThis
      define: {
        global: "globalThis"
      }
    },
    include: [...Object.keys(peerDependencies)]
  },
  build: {
    lib: {
      entry: resolve(__vite_injected_original_dirname, "src/index.ts"),
      name: "ord-connect",
      fileName: "ord-connect"
    },
    rollupOptions: {
      external: [...Object.keys(peerDependencies)]
    },
    commonjsOptions: {
      include: [/node_modules/, ...Object.keys(peerDependencies)]
    }
  },
  plugins: [
    react(),
    dts({
      insertTypesEntry: true
    }),
    commonjs(),
    cssInjectedByJsPlugin(),
    nodePolyfills({
      // Whether to polyfill specific globals.
      globals: {
        Buffer: true
        // can also be 'build', 'dev', or false
      }
    }),
    wasm()
  ],
  server: {
    proxy: {
      "localhost:38332": {
        target: "https://bitcoin-testnet-archive.allthatnode.com/",
        changeOrigin: true,
        secure: false,
        ws: true
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRTpcXFxcR29sZGVuXFxcXFByb2plY3RzXFxcXGdvbGRuaXRlXFxcXHBzYnRcXFxcb3JkLWNvbm5lY3QtbWFpblxcXFxwYWNrYWdlc1xcXFxvcmQtY29ubmVjdFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcR29sZGVuXFxcXFByb2plY3RzXFxcXGdvbGRuaXRlXFxcXHBzYnRcXFxcb3JkLWNvbm5lY3QtbWFpblxcXFxwYWNrYWdlc1xcXFxvcmQtY29ubmVjdFxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRTovR29sZGVuL1Byb2plY3RzL2dvbGRuaXRlL3BzYnQvb3JkLWNvbm5lY3QtbWFpbi9wYWNrYWdlcy9vcmQtY29ubmVjdC92aXRlLmNvbmZpZy50c1wiO2ltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0LXN3Y1wiO1xuaW1wb3J0IHsgbm9kZVBvbHlmaWxscyB9IGZyb20gXCJ2aXRlLXBsdWdpbi1ub2RlLXBvbHlmaWxsc1wiO1xuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgZHRzIGZyb20gXCJ2aXRlLXBsdWdpbi1kdHNcIjtcbmltcG9ydCAqIGFzIHBhY2thZ2VKc29uIGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuaW1wb3J0IGNvbW1vbmpzIGZyb20gXCJAcm9sbHVwL3BsdWdpbi1jb21tb25qc1wiO1xuaW1wb3J0IHsgd2FzbSB9IGZyb20gJ0Byb2xsdXAvcGx1Z2luLXdhc20nO1xuaW1wb3J0IGNzc0luamVjdGVkQnlKc1BsdWdpbiBmcm9tIFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCI7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBvcHRpbWl6ZURlcHM6IHtcbiAgICBlc2J1aWxkT3B0aW9uczoge1xuICAgICAgLy8gTm9kZS5qcyBnbG9iYWwgdG8gYnJvd3NlciBnbG9iYWxUaGlzXG4gICAgICBkZWZpbmU6IHtcbiAgICAgICAgZ2xvYmFsOiBcImdsb2JhbFRoaXNcIixcbiAgICAgIH0sXG4gICAgfSxcbiAgICBpbmNsdWRlOiBbLi4uT2JqZWN0LmtleXMocGFja2FnZUpzb24ucGVlckRlcGVuZGVuY2llcyldLFxuICB9LFxuICBidWlsZDoge1xuICAgIGxpYjoge1xuICAgICAgZW50cnk6IHJlc29sdmUoX19kaXJuYW1lLCBcInNyYy9pbmRleC50c1wiKSxcbiAgICAgIG5hbWU6IFwib3JkLWNvbm5lY3RcIixcbiAgICAgIGZpbGVOYW1lOiBcIm9yZC1jb25uZWN0XCIsXG4gICAgfSxcbiAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICBleHRlcm5hbDogWy4uLk9iamVjdC5rZXlzKHBhY2thZ2VKc29uLnBlZXJEZXBlbmRlbmNpZXMpXSxcbiAgICB9LFxuICAgIGNvbW1vbmpzT3B0aW9uczoge1xuICAgICAgaW5jbHVkZTogWy9ub2RlX21vZHVsZXMvLCAuLi5PYmplY3Qua2V5cyhwYWNrYWdlSnNvbi5wZWVyRGVwZW5kZW5jaWVzKV0sXG4gICAgfSxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIHJlYWN0KCksXG4gICAgZHRzKHtcbiAgICAgIGluc2VydFR5cGVzRW50cnk6IHRydWUsXG4gICAgfSksXG4gICAgY29tbW9uanMoKSxcbiAgICBjc3NJbmplY3RlZEJ5SnNQbHVnaW4oKSxcbiAgICBub2RlUG9seWZpbGxzKHtcbiAgICAgIC8vIFdoZXRoZXIgdG8gcG9seWZpbGwgc3BlY2lmaWMgZ2xvYmFscy5cbiAgICAgIGdsb2JhbHM6IHtcbiAgICAgICAgQnVmZmVyOiB0cnVlLCAvLyBjYW4gYWxzbyBiZSAnYnVpbGQnLCAnZGV2Jywgb3IgZmFsc2VcbiAgICAgIH0sXG4gICAgfSksXG4gICAgd2FzbSgpLFxuICBdLFxuICBzZXJ2ZXI6IHtcbiAgICBwcm94eToge1xuICAgICAgJ2xvY2FsaG9zdDozODMzMic6IHtcbiAgICAgICAgdGFyZ2V0OiAnaHR0cHM6Ly9iaXRjb2luLXRlc3RuZXQtYXJjaGl2ZS5hbGx0aGF0bm9kZS5jb20vJyxcbiAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxuICAgICAgICBzZWN1cmU6IGZhbHNlLFxuICAgICAgICB3czogdHJ1ZSxcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwiQG9yZHphYXIvb3JkLWNvbm5lY3RcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4wLjBcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlJlYWN0IGNvbXBvbmVudCBsaWJyYXJ5IGZvciBCaXRjb2luIE9yZGluYWxzIGFuZCBTYWRvIFByb3RvY29sIENvbm5lY3Rpb25zXCIsXG4gIFwicmVwb3NpdG9yeVwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vcmR6YWFyL29yZC1jb25uZWN0XCIsXG4gIFwiYnVnc1wiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9vcmR6YWFyL29yZC1jb25uZWN0L2lzc3Vlc1wiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiZGlzdC8qXCIsXG4gICAgXCJpbmRleC5kLnRzXCJcbiAgXSxcbiAgXCJ0eXBlc1wiOiBcIi4vaW5kZXguZC50c1wiLFxuICBcIm1haW5cIjogXCIuL2Rpc3Qvb3JkLWNvbm5lY3QudW1kLmNqc1wiLFxuICBcIm1vZHVsZVwiOiBcIi4vZGlzdC9vcmQtY29ubmVjdC5qc1wiLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9vcmQtY29ubmVjdC5qc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L29yZC1jb25uZWN0LnVtZC5janNcIlxuICAgIH0sXG4gICAgXCIuL2Rpc3Qvc3R5bGUuY3NzXCI6IHtcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L3N0eWxlLmNzc1wiXG4gICAgfVxuICB9LFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ0c2MgJiYgdml0ZSBidWlsZFwiLFxuICAgIFwiYnVpbGQ6d2F0Y2hcIjogXCJ0c2MgJiYgdml0ZSBidWlsZCAtLXdhdGNoXCIsXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IHNyYyAtLWV4dCB0cyx0c3ggLS1yZXBvcnQtdW51c2VkLWRpc2FibGUtZGlyZWN0aXZlc1wiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiXG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAbWFnaWNlZGVuLW9zcy9tc2lnbmVyXCI6IFwiZmlsZTpzcmMvbW9kdWxlcy9tc2lnbmVyXCIsXG4gICAgXCJAbWVtcG9vbC9tZW1wb29sLmpzXCI6IFwiXjIuMy4wXCIsXG4gICAgXCJAc2Fkb3Byb3RvY29sL29yZGl0LXNka1wiOiBcIjIuMS4xXCIsXG4gICAgXCJiaXRjb2luanMtbGliXCI6IFwiXjYuMS4wXCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4yLjBcIixcbiAgICBcInJwYy1iaXRjb2luXCI6IFwiXjIuMC4wXCIsXG4gICAgXCJzYXRzLWNvbm5lY3RcIjogXCJeMC41LjBcIixcbiAgICBcInRpbnktc2VjcDI1NmsxXCI6IFwiXjIuMi4wXCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHJvbGx1cC9wbHVnaW4tY29tbW9uanNcIjogXCJeMjUuMC40XCIsXG4gICAgXCJAcm9sbHVwL3BsdWdpbi13YXNtXCI6IFwiXjYuMi4yXCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC42LjBcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjIxXCIsXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjIuN1wiLFxuICAgIFwiQHR5cGVzY3JpcHQtZXNsaW50L2VzbGludC1wbHVnaW5cIjogXCJeNS42Mi4wXCIsXG4gICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjUuNjIuMFwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI6IFwiXjMuMy4yXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOC40OS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjNcIixcbiAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjIuMlwiLFxuICAgIFwidml0ZVwiOiBcIl40LjQuOVwiLFxuICAgIFwidml0ZS1wbHVnaW4tY3NzLWluamVjdGVkLWJ5LWpzXCI6IFwiXjMuMy4wXCIsXG4gICAgXCJ2aXRlLXBsdWdpbi1kdHNcIjogXCJeMi4zLjBcIixcbiAgICBcInZpdGUtcGx1Z2luLW5vZGUtcG9seWZpbGxzXCI6IFwiXjAuMTEuM1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBoZWFkbGVzc3VpL3JlYWN0XCI6IFwiXjEuNy4xN1wiLFxuICAgIFwiQG1peG9iaXRjL21zaWduZXJcIjogXCJeMS4wLjk0XCIsXG4gICAgXCJAc2Fkb3Byb3RvY29sL29yZGl0LXNka1wiOiBcIjIuMS4xXCIsXG4gICAgXCJheGlvc1wiOiBcIl4xLjUuMVwiLFxuICAgIFwiYml0Y29pbmpzLWxpYlwiOiBcIl42LjEuMFwiLFxuICAgIFwiYm9yaW5nLWF2YXRhcnNcIjogXCJeMS4xMC4xXCIsXG4gICAgXCJzYXRzLWNvbm5lY3RcIjogXCJeMC41LjBcIlxuICB9LFxuICBcImxpbnQtc3RhZ2VkXCI6IHtcbiAgICBcIipcIjogW1xuICAgICAgXCJwcmV0dGllciAtLXdyaXRlIC0taWdub3JlLXVua25vd25cIlxuICAgIF0sXG4gICAgXCIqLntqcyxqc3gsdHMsdHN4fVwiOiBbXG4gICAgICBcImVzbGludCAtLWZpeFwiXG4gICAgXVxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQW9aLFNBQVMsb0JBQW9CO0FBQ2piLE9BQU8sV0FBVztBQUNsQixTQUFTLHFCQUFxQjtBQUM5QixTQUFTLGVBQWU7QUFDeEIsT0FBTyxTQUFTOzs7QUM0QmQsdUJBQW9CO0FBQUEsRUFDbEIsMEJBQTBCO0FBQUEsRUFDMUIsdUJBQXVCO0FBQUEsRUFDdkIsMkJBQTJCO0FBQUEsRUFDM0IsaUJBQWlCO0FBQUEsRUFDakIsT0FBUztBQUFBLEVBQ1QsYUFBYTtBQUFBLEVBQ2IsZUFBZTtBQUFBLEVBQ2YsZ0JBQWdCO0FBQUEsRUFDaEIsa0JBQWtCO0FBQ3BCOzs7QURwQ0YsT0FBTyxjQUFjO0FBQ3JCLFNBQVMsWUFBWTtBQUNyQixPQUFPLDJCQUEyQjtBQVJsQyxJQUFNLG1DQUFtQztBQVd6QyxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixjQUFjO0FBQUEsSUFDWixnQkFBZ0I7QUFBQTtBQUFBLE1BRWQsUUFBUTtBQUFBLFFBQ04sUUFBUTtBQUFBLE1BQ1Y7QUFBQSxJQUNGO0FBQUEsSUFDQSxTQUFTLENBQUMsR0FBRyxPQUFPLEtBQWlCLGdCQUFnQixDQUFDO0FBQUEsRUFDeEQ7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLEtBQUs7QUFBQSxNQUNILE9BQU8sUUFBUSxrQ0FBVyxjQUFjO0FBQUEsTUFDeEMsTUFBTTtBQUFBLE1BQ04sVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxHQUFHLE9BQU8sS0FBaUIsZ0JBQWdCLENBQUM7QUFBQSxJQUN6RDtBQUFBLElBQ0EsaUJBQWlCO0FBQUEsTUFDZixTQUFTLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxLQUFpQixnQkFBZ0IsQ0FBQztBQUFBLElBQ3hFO0FBQUEsRUFDRjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLElBQ04sSUFBSTtBQUFBLE1BQ0Ysa0JBQWtCO0FBQUEsSUFDcEIsQ0FBQztBQUFBLElBQ0QsU0FBUztBQUFBLElBQ1Qsc0JBQXNCO0FBQUEsSUFDdEIsY0FBYztBQUFBO0FBQUEsTUFFWixTQUFTO0FBQUEsUUFDUCxRQUFRO0FBQUE7QUFBQSxNQUNWO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxLQUFLO0FBQUEsRUFDUDtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ04sT0FBTztBQUFBLE1BQ0wsbUJBQW1CO0FBQUEsUUFDakIsUUFBUTtBQUFBLFFBQ1IsY0FBYztBQUFBLFFBQ2QsUUFBUTtBQUFBLFFBQ1IsSUFBSTtBQUFBLE1BQ047QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
